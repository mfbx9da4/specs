openapi: 3.0.1
info:
  title: SolarWinds Observability REST API
  description: "[Rest API
    Documentation](https://documentation.solarwinds.com/en/success_center/obser\
    vability/content/api/api-swagger.htm)"
  contact: {}
  license:
    name: License name
  version: "1.0"
security:
  - Full Access API Token: []
paths:
  /changeevents:
    post:
      tags:
        - changeevents
      summary: Create an event
      operationId: createEvent
      requestBody:
        description: A JSON object containing a change event
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ChangeEvent"
        required: true
      responses:
        "200":
          description: A JSON object containing the id of the created event
          content:
            application/json:
              example:
                id: 0
  /entities:
    get:
      tags:
        - entities
      summary: Get entities by type
      operationId: getEntities
      parameters:
        - name: type
          in: query
          description: The entities type
          required: true
          schema:
            type: string
        - name: name
          in: query
          description: The entities name
          schema:
            type: string
            default: ""
        - name: pageSize
          in: query
          description: Number of entities in a response page
          schema:
            type: integer
            format: int32
            default: 50
        - name: skipToken
          in: query
          description: For opaque pagination
          schema:
            type: string
            default: ""
      responses:
        "200":
          description: A JSON object containing an array of entities
          content:
            application/json:
              example:
                entities:
                  - id: e-1489588417967403008
                    type: Website
                    name: test-site-new5
                  - id: e-1491513720093536256
                    type: Website
                    name: MichalTest91
                pageInfo:
                  nextPage: /v1/entities?type=Website&name=&pageSize=2&after=ZS0xNDkxNTEzNzIwMDkzNTM2MjU2
  /entities/{id}:
    get:
      tags:
        - entities
      summary: Get entity by id
      operationId: getEntityById
      parameters:
        - name: id
          in: path
          description: The entities ID
          required: true
          schema:
            type: string
      responses:
        "200":
          description: A JSON object containing a single entity
          content:
            application/json:
              example:
                id: e-1489588417967403008
                type: Website
                name: test-site-new5
  /logs/archives:
    get:
      tags:
        - logs/archives
      summary: Retrieve data on archived logs
      description: Retrieve data on logs archived between a start and end time
      operationId: getLogArchives
      parameters:
        - name: startTime
          in: query
          description: "Time must be within 1 year from the current date. <br><br> ISO
            8601 standard <br> Format: <i>yyyy-MM-ddTHH:mm:ssZ</i>"
          required: true
          schema:
            type: string
          example: 2024-01-23T00:00:00Z
        - name: endTime
          in: query
          description: "Time must be within 1 year from the current date. <br><br> ISO
            8601 standard <br> Format: <i>yyyy-MM-ddTHH:mm:ssZ</i>"
          required: true
          schema:
            type: string
          example: 2024-01-23T10:30:00Z
        - name: pageSize
          in: query
          description: Maximum number of records to be fetched per request
          required: false
          schema:
            type: integer
            format: int32
            default: 1000
        - name: skipToken
          in: query
          description: For opaque pagination
          required: false
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LogArchiveResponse"
  /metrics:
    get:
      tags:
        - metrics
      summary: List metrics
      description: List metrics seen within a time period
      operationId: listMetrics
      parameters:
        - name: name
          in: query
          description: metric name
          required: false
          schema:
            type: string
        - name: startTime
          in: query
          description: yyyy-MM-ddTHH:mm:ssZ
          required: false
          schema:
            type: string
        - name: endTime
          in: query
          description: yyyy-MM-ddTHH:mm:ssZ
          required: false
          schema:
            type: string
        - name: pageSize
          in: query
          description: Number of metrics in a response page
          required: false
          schema:
            type: integer
            format: int32
            default: 100
        - name: skipToken
          in: query
          description: "For opaque pagination, with default value : empty string"
          required: false
          schema:
            type: string
            default: ""
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListMetricsResponse"
  /metrics/{name}:
    get:
      tags:
        - metrics
      summary: Get metric info
      description: Get info about a metric
      operationId: getMetric
      parameters:
        - name: name
          in: path
          description: metric name
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetMetricResponse"
  /metrics/{name}/measurements:
    get:
      tags:
        - metrics
      summary: List metric's measurement values for a metric
      description: List metric measurement values, grouped by attributes, filtered by
        the filter
      operationId: listMetricMeasurements
      parameters:
        - name: name
          in: path
          description: metric name
          required: true
          schema:
            type: string
        - name: filter
          in: query
          description: Query to filter the measurement values. e.g  id:[id1,id2]
            category:moderate
          required: false
          schema:
            type: string
        - name: groupBy
          in: query
          description: CSV string of attribute names to group measurements by. e.g
            id,category
          required: false
          schema:
            type: string
        - name: aggregateBy
          in: query
          description: One of COUNT, MIN, MAX, AVG, SUM, or LAST
          required: false
          schema:
            type: string
            default: AVG
        - name: bucketSizeInSeconds
          in: query
          description: Resolution size of an aggregation bucket in seconds
          required: false
          schema:
            type: integer
            format: int32
        - name: preGroupBy
          in: query
          description: >-
            Secondary grouping to allow aggregating data points inside
            individual buckets.
               Has to be set together with `preGroupByMethod`
          required: false
          schema:
            type: string
        - name: preGroupByMethod
          in: query
          description: >-
            Secondary aggregation to allow aggregating data points inside
            individual buckets.
               Has to be set together with `preGroupBy`
          required: false
          schema:
            type: string
        - name: startTime
          in: query
          description: yyyy-MM-ddTHH:mm:ssZ
          required: false
          schema:
            type: string
        - name: endTime
          in: query
          description: yyyy-MM-ddTHH:mm:ssZ
          required: false
          schema:
            type: string
        - name: pageSize
          in: query
          description: Number of groupings in a response page
          required: false
          schema:
            type: integer
            format: int32
            default: 100
        - name: skipToken
          in: query
          description: "For opaque pagination, with default value : empty string"
          required: false
          schema:
            type: string
            default: ""
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListMetricMeasurementsResponse"
  /metrics/{name}/attributes:
    get:
      tags:
        - metrics
      summary: List metric attribute names
      description: List all attribute names defined for the given metric
      operationId: listMetricAttributeNames
      parameters:
        - name: name
          in: path
          description: metric name
          required: true
          schema:
            type: string
        - name: startTime
          in: query
          description: yyyy-MM-ddTHH:mm:ssZ
          required: false
          schema:
            type: string
        - name: endTime
          in: query
          description: yyyy-MM-ddTHH:mm:ssZ
          required: false
          schema:
            type: string
        - name: pageSize
          in: query
          description: Number of attribute names in a response page
          required: false
          schema:
            type: integer
            format: int32
            default: 100
        - name: skipToken
          in: query
          description: "For opaque pagination, with default value : empty string"
          required: false
          schema:
            type: string
            default: ""
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListMetricAttributeNamesResponse"
  /metrics/{name}/attributes/{attributeName}:
    get:
      tags:
        - metrics
      summary: List metric attribute values
      description: List values of a metric's attribute
      operationId: listMetricAttributeValues
      parameters:
        - name: name
          in: path
          description: metric name
          required: true
          schema:
            type: string
        - name: attributeName
          in: path
          description: attribute name
          required: true
          schema:
            type: string
        - name: startTime
          in: query
          description: yyyy-MM-ddTHH:mm:ssZ
          required: false
          schema:
            type: string
        - name: endTime
          in: query
          description: yyyy-MM-ddTHH:mm:ssZ
          required: false
          schema:
            type: string
        - name: pageSize
          in: query
          description: Number of attribute values in a response page
          required: false
          schema:
            type: integer
            format: int32
            default: 100
        - name: skipToken
          in: query
          description: "For opaque pagination, with default value : empty string"
          required: false
          schema:
            type: string
            default: ""
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListMetricAttributeValuesResponse"
  /metadata/entities/types:
    get:
      tags:
        - metadata
      summary: List all entity types
      description: List all available entity types.
      operationId: listEntityTypes
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListEntityTypesResponse"
  /metadata/entities/types/{type}/metrics:
    get:
      tags:
        - metadata
      summary: List metrics metadata for an entity type
      description: List metrics metadata for an entity type between a start and end
        time. If start time and end time unspecified, default will be applied.
      operationId: listMetricsForEntityType
      parameters:
        - name: type
          in: path
          description: entity type
          required: true
          schema:
            type: string
        - name: startTime
          in: query
          description: yyyy-MM-ddTHH:mm:ssZ
          required: false
          schema:
            type: string
        - name: endTime
          in: query
          description: yyyy-MM-ddTHH:mm:ssZ
          required: false
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListMetricsForEntityTypeResponse"
  /logs:
    get:
      tags:
        - logs
      summary: Search logs
      description: Search logs within a time period
      operationId: logs
      parameters:
        - name: filter
          in: query
          description: A search query string.
          required: false
          schema:
            type: string
        - name: group
          in: query
          description: Search a specific group
          required: false
          schema:
            type: string
        - name: startTime
          in: query
          description: yyyy-MM-ddTHH:mm:ssZ
          required: false
          schema:
            type: string
        - name: endTime
          in: query
          description: yyyy-MM-ddTHH:mm:ssZ
          required: false
          schema:
            type: string
        - name: direction
          in: query
          description: "Search direction: backward, forward, or tail"
          required: false
          schema:
            type: string
        - name: pageSize
          in: query
          description: Number of logs in a response page
          required: false
          schema:
            type: integer
            format: int32
            default: 10000
        - name: skipToken
          in: query
          description: "For opaque pagination, with default value : empty string"
          required: false
          schema:
            type: string
            default: ""
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LogsResponse"
  /entities/websites:
    post:
      tags:
        - entities/websites
      summary: Create website
      operationId: createWebsite
      requestBody:
        $ref: "#/components/requestBodies/WebsiteBody"
      responses:
        "201":
          $ref: "#/components/responses/EntityCreated"
        4XX:
          $ref: "#/components/responses/Error"
  /entities/websites/{entityId}:
    get:
      tags:
        - entities/websites
      summary: Get website
      operationId: getWebsiteById
      parameters:
        - $ref: "#/components/parameters/EntityId"
      responses:
        "200":
          $ref: "#/components/responses/WebsiteResponse"
        4XX:
          $ref: "#/components/responses/Error"
    put:
      tags:
        - entities/websites
      summary: Update website
      operationId: updateWebsiteById
      parameters:
        - $ref: "#/components/parameters/EntityId"
      requestBody:
        $ref: "#/components/requestBodies/WebsiteBody"
      responses:
        "200":
          $ref: "#/components/responses/EntityUpdated"
        4XX:
          $ref: "#/components/responses/Error"
    delete:
      tags:
        - entities/websites
      summary: Delete website
      operationId: deleteWebsiteById
      parameters:
        - $ref: "#/components/parameters/EntityId"
      responses:
        "200":
          $ref: "#/components/responses/EntityDeleted"
        4XX:
          $ref: "#/components/responses/Error"
components:
  schemas:
    ChangeEvent:
      required:
        - name
        - title
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          maxLength: 100
          minLength: 1
          type: string
        title:
          maxLength: 250
          minLength: 1
          type: string
        timestamp:
          type: integer
          format: int64
        source:
          type: string
        description:
          type: string
        parentEventId:
          type: integer
          format: int64
        tags:
          type: object
          additionalProperties:
            type: string
        links:
          type: array
          items:
            $ref: "#/components/schemas/Link"
    Link:
      required:
        - href
        - rel
      type: object
      properties:
        rel:
          type: string
        href:
          type: string
        label:
          type: string
    Jwt:
      required:
        - scopes
      type: object
      properties:
        scopes:
          type: array
          items:
            type: string
    LogArchiveModel:
      required:
        - archiveSize
        - archivedTimestamp
        - downloadUrl
        - id
        - name
      type: object
      properties:
        id:
          type: string
          description: ID of the file
          example: logs/138723/dt=2024-01-23/2024-01-23-08.json.gz
        name:
          type: string
          description: Name of the file
          example: 2024-01-23-08.json.gz
        downloadUrl:
          type: string
          description: URL location of the file
          example: https://ssp-log-archives.s3.amazonaws.com/logs/138723/dt%3D2024-01-23/2024-01-23-08.json.gz?X-Amz-Security-Token=IQ...
        archivedTimestamp:
          type: string
          description: Epoc timestamp (in seconds) of archival
          example: "1706020985"
        archiveSize:
          type: number
          description: Size of file in bytes
          format: double
          example: 817226354
      description: List of archived logs data
    LogArchiveResponse:
      required:
        - logArchives
        - pageInfo
      type: object
      properties:
        logArchives:
          type: array
          description: List of archived logs data
          items:
            $ref: "#/components/schemas/LogArchiveModel"
        pageInfo:
          $ref: "#/components/schemas/PageInfoModel"
    PageInfoModel:
      type: object
      properties:
        nextPage:
          type: string
          example: https://api.na-01.cloud.solarwinds.com/v1/logs/archives?startTime=...
      description: Pagination
    GetMetricResponse:
      required:
        - name
      type: object
      properties:
        name:
          type: string
        units:
          type: string
        formula:
          type: string
        lastReportedTime:
          type: string
    ListMetricsResponse:
      required:
        - metricsInfo
      type: object
      properties:
        metricsInfo:
          type: array
          items:
            $ref: "#/components/schemas/GetMetricResponse"
        pageInfo:
          $ref: "#/components/schemas/PageInfo"
    PageInfo:
      type: object
      properties:
        prevPage:
          type: string
          format: uri
        nextPage:
          type: string
          format: uri
    Attribute:
      required:
        - key
        - value
      type: object
      properties:
        key:
          type: string
        value:
          type: string
    ListMetricMeasurementsResponse:
      required:
        - bucketSizeInSeconds
        - groupings
      type: object
      properties:
        groupings:
          type: array
          items:
            $ref: "#/components/schemas/MeasurementGrouping"
        bucketSizeInSeconds:
          type: integer
          format: int32
        pageInfo:
          $ref: "#/components/schemas/PageInfo"
    Measurement:
      type: object
      properties:
        time:
          type: string
        value:
          type: number
          format: double
    MeasurementGrouping:
      required:
        - measurements
      type: object
      properties:
        attributes:
          type: array
          items:
            $ref: "#/components/schemas/Attribute"
        measurements:
          type: array
          items:
            $ref: "#/components/schemas/Measurement"
    ListMetricAttributeNamesResponse:
      required:
        - names
      type: object
      properties:
        names:
          type: array
          items:
            type: string
        pageInfo:
          $ref: "#/components/schemas/PageInfo"
    ListMetricAttributeValuesResponse:
      required:
        - name
        - values
      type: object
      properties:
        name:
          type: string
        values:
          type: array
          items:
            type: string
        pageInfo:
          $ref: "#/components/schemas/PageInfo"
    ListEntityTypesResponse:
      required:
        - types
      type: object
      properties:
        types:
          type: array
          description: Array of entity types
          example:
            - Service
            - ServiceInstance
            - KubernetesCluster
          items:
            type: string
            description: Array of entity types
            example: '["Service","ServiceInstance","KubernetesCluster"]'
    ListMetricsForEntityTypeResponse:
      required:
        - metrics
        - type
      type: object
      properties:
        type:
          type: string
        metrics:
          type: array
          items:
            $ref: "#/components/schemas/GetMetricResponse"
    LogsResponse:
      required:
        - logs
      type: object
      properties:
        logs:
          type: array
          items:
            $ref: "#/components/schemas/RestLogEvent"
        pageInfo:
          $ref: "#/components/schemas/PageInfo"
    RestLogEvent:
      required:
        - hostname
        - id
        - message
        - program
        - severity
        - time
      type: object
      properties:
        id:
          type: string
        time:
          type: string
        message:
          type: string
        hostname:
          type: string
        severity:
          type: string
        program:
          type: string
    EntityIdSchema:
      type: object
      required:
        - id
      properties:
        id:
          type: string
          example: e-1448474379026206720
    EntityBase:
      allOf:
        - $ref: "#/components/schemas/EntityIdSchema"
        - type: object
          required:
            - type
          properties:
            type:
              type: string
              example: Website
    WebsiteProtocol:
      type: string
      description: Protocol to perform availability checks for.
      enum:
        - HTTP
        - HTTPS
    ProbeLocationType:
      type: string
      description: Specificity for location of synthetic probes to be used for
        availability tests.
      enum:
        - REGION
        - COUNTRY
        - CITY
    ProbePlatform:
      type: string
      description: Cloud platforms hosting synthetic probes.
      enum:
        - AWS
        - AZURE
        - GOOGLE_CLOUD
    ProbePlatformOptions:
      type: object
      description: >
        Configure cloud platforms of the synthetic availability test probes.

        If omitted or set to null, no particular cloud platform will be enforced.
      required:
        - probePlatforms
      properties:
        probePlatforms:
          type: array
          items:
            $ref: "#/components/schemas/ProbePlatform"
        testFromAll:
          type: boolean
    TestFrom:
      type: object
      description: >
        Configure locations of the synthetic availability test probes.

        Acceptable `values` depend on the selected `type` and actual values of existing probes.

        To find out all possible `values` of each type, fetch the probes from the `/v1/probes` path.
      required:
        - type
        - values
      properties:
        type:
          $ref: "#/components/schemas/ProbeLocationType"
        values:
          type: array
          description: >
            A list of probe location values of the selected `type`. At least one
            value matching an existing

            probe must be provided.
          items:
            type: string
            example: NA
    SslMonitoring:
      type: object
      nullable: true
      description: >
        Configure monitoring of SSL/TLS certificates validity. This option is
        relevant for HTTPS protocol only.


        If omitted or set to null, SSL monitoring will be disabled and its previous configuration discarded.
      properties:
        enabled:
          type: boolean
          nullable: true
          description: >
            Whether SSL monitoring is enabled for the website.


            If set to false, SSL monitoring will be disabled, but the other settings will be remembered in

            case you re-enable it later.


            If omitted, the previous setting will stay in effect. If there is no previous setting, the value

            will default to false.
        daysPriorToExpiration:
          type: integer
          nullable: true
          description: >
            Number of days before the expiration date an SSL certificate will be
            considered 'expiring.'
          example: 7
          minimum: 1
          maximum: 10000
        ignoreIntermediateCertificates:
          type: boolean
          nullable: true
          description: >
            Use this option to limit the certificate expiration check to only
            the first certificate in the

            chain (normally the host certificate). This way you will not be warned about impending expiration

            of intermediate or root Certification Authority certificates in the chain.


            This option does not affect any other certificate validity checks besides expiration.


            If omitted, the previous setting will stay in effect. If there is no previous setting, the value

            will default to false.
    CustomHeaders:
      type: array
      nullable: true
      description: >
        Configure custom request headers to be sent with each availability test.
        It is possible to

        provide multiple headers with the same name.


        If omitted, set to null or set to an empty array, no custom headers will be sent.
      items:
        type: object
        required:
          - name
          - value
        properties:
          name:
            type: string
            description: >
              Name of a request header. Must contain only characters allowed by
              RFC: a-z, A-Z, 0-9, - and _.
          value:
            type: string
            description: Value of a request header.
    TestIntervalInSeconds:
      type: integer
      description: >
        Configure how often availability tests should be performed.


        Provide a number of seconds that is divisible by 60 and no greater than 14400 (4 hours).
      minimum: 60
      multipleOf: 60
      maximum: 14400
    NextOnDemandAvailabilityTime:
      type: object
      properties:
        nextOnDemandAvailabilityTime:
          type: number
          description: |
            Timestamp for when the next on-demand check could be executed. 
            If at "0", it means you can execute it anytime.
          example: 0
    Error:
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: string
          description: One of a server-defined set of error codes.
          example: BadInput
        message:
          type: string
          description: A human-readable representation of the error.
          example: Failed to create a website
        target:
          type: string
          description: The target of the error.
          example: RequestBody
        details:
          type: array
          items:
            $ref: "#/components/schemas/Error"
        innerError:
          $ref: "#/components/schemas/InnerError"
    InnerError:
      type: object
      description: An object containing more specific information than the current
        object about the error.
      required:
        - code
      properties:
        code:
          type: string
          description: A more specific error code than was provided by the containing error.
          example: NoMonitoringConfigured
        message:
          type: string
          description: A human-readable representation of the error.
          example: >
            You have to configure either Availability monitoring or Real User
            Monitoring (RUM) 

            to be able to create a website
        target:
          type: string
          description: The target of the error.
          example: WebsiteConfiguration
        innererror:
          $ref: "#/components/schemas/InnerError"
    WebsiteSchema:
      type: object
      required:
        - name
        - url
      properties:
        name:
          type: string
          description: >
            Name of the website, which must be unique within the organization.
            The website must also not

            contain any control characters, any white space other than space (U+0020), or any consecutive,

            leading or trailing spaces.
          example: solarwinds.com
        url:
          type: string
          description: >
            URL of the website. Must be a valid URL with no leading or trailing
            white space. Must not contain

            invalid port number (>65535).
          example: https://www.solarwinds.com
        availabilityCheckSettings:
          type: object
          nullable: true
          description: >
            Use this field to configure availability tests for the website.


            You are required to configure at least availability monitoring or real user monitoring

            to be able to create website.
          required:
            - testIntervalInSeconds
            - protocols
            - testFrom
          properties:
            checkForString:
              $ref: "#/components/schemas/CheckForStringType"
            testIntervalInSeconds:
              $ref: "#/components/schemas/TestIntervalInSeconds"
            protocols:
              type: array
              description: >
                Configure which protocols need availability tests to be
                performed. 

                At least one protocol must be provided.
              example:
                - HTTP
                - HTTPS
              items:
                $ref: "#/components/schemas/WebsiteProtocol"
            platformOptions:
              $ref: "#/components/schemas/ProbePlatformOptions"
            testFrom:
              $ref: "#/components/schemas/TestFrom"
            ssl:
              $ref: "#/components/schemas/SslMonitoring"
            customHeaders:
              $ref: "#/components/schemas/CustomHeaders"
            allowInsecureRenegotiation:
              type: boolean
              description: >
                Allow insecure SSL renegotiation which introduces a security
                risk in the communication process.


                Checking this option could lead to exposing to unauthorized entities and possibility of unauthorized access, interception, or manipulation of sensitive data, compromising the integrity and security of the communication channel.


                Available only with HTTPS check.


                If omitted or set to null, insecure SSL renegotiation won't be allowed.
        rum:
          type: object
          nullable: true
          description: >
            Use this field to configure real user monitoring (RUM) for the
            website.


            You are required to configure at least availability monitoring or real user monitoring

            to be able to create website.
          required:
            - spa
          properties:
            apdexTimeInSeconds:
              type: integer
              minimum: 1
              example: 4
            snippet:
              readOnly: true
              type: string
            spa:
              type: boolean
    OnDemandCheckStatus:
      type: string
      enum:
        - UNSPECIFIED
        - OK
        - TOO_EARLY
    OnDemandCheckSchema:
      allOf:
        - $ref: "#/components/schemas/EntityIdSchema"
        - type: object
          properties:
            nextOnDemandAvailabilityTime:
              type: string
              description: Time when it will be possible to schedule another on-demand check
              example: "1706184488"
              pattern: ^\d+$
            onDemandCheckStatus:
              $ref: "#/components/schemas/OnDemandCheckStatus"
    AnalysisDetailsBase:
      type: object
      required:
        - durationInMs
      properties:
        durationInMs:
          type: integer
        errorMessage:
          type: string
    IpLookupDetails:
      type: object
      required:
        - hostname
        - resolvedIp
      properties:
        hostname:
          type: string
        resolvedIp:
          type: string
    HttpHeader:
      type: object
      properties:
        name:
          type: string
        value:
          type: string
    HttpMessage:
      allOf:
        - $ref: "#/components/schemas/AnalysisDetailsBase"
        - type: object
          required:
            - headers
          properties:
            headers:
              type: array
              items:
                $ref: "#/components/schemas/HttpHeader"
            body:
              type: string
    AnalysisSchema:
      allOf:
        - $ref: "#/components/schemas/AnalysisDetailsBase"
        - type: object
          description: Analysis related to availability test result.
          required:
            - analysisId
          properties:
            analysisId:
              type: string
              example: e-1450145096950939648-HTTP-city:Frankfurt-1702470792-analysis
            resolveIp:
              allOf:
                - $ref: "#/components/schemas/AnalysisDetailsBase"
                - type: object
                  required:
                    - resolvedIp
                  properties:
                    hostname:
                      type: string
                    resolvedIp:
                      type: string
            connection:
              allOf:
                - $ref: "#/components/schemas/AnalysisDetailsBase"
                - type: object
                  properties:
                    ipAddress:
                      type: string
                    port:
                      type: integer
                    protocol:
                      type: string
            message:
              type: object
              required:
                - durationInMs
              properties:
                durationInMs:
                  type: integer
                errorMessage:
                  type: string
            output:
              allOf:
                - $ref: "#/components/schemas/AnalysisDetailsBase"
                - type: object
                  required:
                    - rawOutput
                  properties:
                    rawOutput:
                      type: string
            traceroute:
              type: object
              required:
                - durationInMs
                - rawOutput
              properties:
                durationInMs:
                  type: integer
                rawOutput:
                  type: string
            redirects:
              type: array
              items:
                type: object
                required:
                  - url
                  - durationInMs
                properties:
                  url:
                    type: string
                  durationInMs:
                    type: integer
                  ipLookupDetails:
                    allOf:
                      - $ref: "#/components/schemas/AnalysisDetailsBase"
                      - type: object
                        required:
                          - hostname
                          - resolvedIp
                        properties:
                          hostname:
                            type: string
                          resolvedIp:
                            type: string
                  connectionDetails:
                    allOf:
                      - $ref: "#/components/schemas/AnalysisDetailsBase"
                      - type: object
                        required:
                          - ipAddress
                          - port
                          - protocol
                        properties:
                          ipAddress:
                            type: string
                          port:
                            type: integer
                          protocol:
                            type: string
                  requestDetails:
                    $ref: "#/components/schemas/HttpMessage"
                  responseDetails:
                    $ref: "#/components/schemas/HttpMessage"
    Validation:
      type: object
      required:
        - type
        - status
      properties:
        type:
          type: string
          enum:
            - CERTIFICATES
            - CONTAINS_STRING
            - NOT_CONTAINS_STRING
        status:
          type: string
          enum:
            - SUCCESS
            - WARNING
            - FAILURE
            - SKIPPED
    SslCertificate:
      type: object
      required:
        - name
        - validTo
        - certificate
      properties:
        name:
          type: string
        validTo:
          type: string
        certificate:
          type: string
    SslCertificates:
      allOf:
        - $ref: "#/components/schemas/Validation"
        - type: object
          required:
            - minTimeValid
          properties:
            minTimeValid:
              type: integer
            certificates:
              type: object
              required:
                - expired
                - expiring
                - invalid
                - valid
              properties:
                expired:
                  type: array
                  items:
                    $ref: "#/components/schemas/SslCertificate"
                expiring:
                  type: array
                  items:
                    $ref: "#/components/schemas/SslCertificate"
                invalid:
                  type: array
                  items:
                    $ref: "#/components/schemas/SslCertificate"
                valid:
                  type: array
                  items:
                    $ref: "#/components/schemas/SslCertificate"
    CheckForString:
      allOf:
        - $ref: "#/components/schemas/Validation"
        - type: object
          required:
            - string
          properties:
            string:
              type: string
    ValidationSchema:
      type: object
      properties:
        sslCertificates:
          $ref: "#/components/schemas/SslCertificates"
        checkForString:
          $ref: "#/components/schemas/CheckForString"
    CheckForStringType:
      type: object
      nullable: true
      description: >
        Use this field to configure whether availability tests should check for
        presence or absence of a

        particular string on a page.


        If the `operator` is DOES_NOT_CONTAIN and the `value` is found on the page, the availability test

        will fail.


        Likewise, if the `operator` is CONTAINS and the `value` is not found on the page, the

        availability test will fail.


        If omitted or set to null, the string checking functionality will be disabled.
      required:
        - operator
        - value
      properties:
        operator:
          type: string
          description: >
            Defines whether the check should pass only when the string is
            present on the page (CONTAINS) or

            only when it is absent (DOES_NOT_CONTAIN).
          enum:
            - CONTAINS
            - DOES_NOT_CONTAIN
        value:
          type: string
          description: The string that which will be searched in the page source code.
  securitySchemes:
    Full Access API Token:
      type: http
      scheme: bearer
  parameters:
    EntityId:
      in: path
      name: entityId
      schema:
        type: string
      required: true
      example: e-1448474379026206720
    TestResultTime:
      in: query
      name: testResultTime
      schema:
        type: string
        format: date-time
      required: true
      example: 2023-12-13T12:33:12Z
    AnalysisId:
      in: query
      name: analysisId
      schema:
        type: string
      required: true
      example: e-1615727468467286016-HTTPS-region:NA-1702983385-analysis
    ValidationId:
      in: query
      name: validationId
      schema:
        type: string
      required: true
      example: e-1615727468467286016-HTTPS-region:NA-1702984150-validations
  requestBodies:
    WebsiteBody:
      description: A JSON object containing Website configuration
      required: true
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/WebsiteSchema"
  responses:
    EntityCreated:
      description: CREATED
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/EntityIdSchema"
    EntityUpdated:
      description: UPDATED
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/EntityIdSchema"
    EntityDeleted:
      description: DELETED
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/EntityIdSchema"
    Error:
      description: ERROR
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
    WebsiteResponse:
      description: A JSON object containing Website configuration
      content:
        application/json:
          schema:
            allOf:
              - $ref: "#/components/schemas/EntityBase"
              - $ref: "#/components/schemas/WebsiteSchema"
              - $ref: "#/components/schemas/NextOnDemandAvailabilityTime"
    ScheduleOnDemandCheckResponse:
      description: ATTEMPT TO SCHEDULE
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/OnDemandCheckSchema"
servers:
  - url: https://api.na-01.cloud.solarwinds.com/v1
    description: ""